Create Table applestore_description_combined as 

SELECT * FROM appleStore_description1

union all

SELECT * FROapplestore_description_combinedM appleStore_description2

union all

SELECT * FROM appleStore_description3

union all 

SELECT * FROM appleStore_description4


 **Exploratory Data Analysis**

--check the number of unique apps in both tables--

SELECT Count(Distinct id) as AppsIDs
From AppleStore

SELECT Count(Distinct id) as AppsIDs
From applestore_description_combined

--Check for missing values in fields--

select count(*) as MissinngValues
From AppleStore
where user_rating is null or prime_genre is null or track_name is null

select count(*) as MissinngValues
From applestore_description_combined
where app_desc is null 

--Number of apps per genre--

Select prime_genre, Count(*) as NumApps
From AppleStore
Group by prime_genre
Order By NumApps DESC

--Apps ratings overview-- 

Select min(user_rating) as MinRating,
       max(user_rating) as MaxRating,
       avg(user_rating) as AvgRating
From AppleStore

--Average number of Languages per app--

Select avg(lang_num) as NumberofLanguagesAVG
From AppleStore

--Apps Languages Overview--

Select min(lang_num) as MinLang,			
	   max(lang_num) as MaxLang,
       avg(lang_num) As AvgLang
From AppleStore


**Findings Insights**

--Determine if paid apps lead to more reviews--

Select case 
			when price > 0 then 'Paid'
            else 'Free'
            end as App_Type,
            avg(user_rating) as Avg_Rating
From AppleStore
Group By App_Type

--Do apps with more language options lead to higher ratings--

Select Case 
			When lang_num < 10 Then '<10 languages'
            When lang_num Between 10 and 30 Then '10-30 languages'
            else '>30 languages'
          end as language_bucket,
          avg(user_rating) as AVG_Rating
                From AppleStore
                group by language_bucket
                order by AVG_Rating DESC
            
            
--Genres with low ratings--

Select prime_genre, 
 avg(user_rating) as Avg_Rating
 From AppleStore
 group by prime_genre
 Order by Avg_Rating ASC
 Limit 10 
 
 --AVG Rating & Price Per Genre--
 
 Select prime_genre, avg(price), avg(user_rating) as AVG_Rating
 From AppleStore
 group by prime_genre
 order by price ASC
 limit 100
 
 --Is there any correlation between length of app description and the user rating--
 
 Select case 
 when length(b.app_desc) <500 then 'Short'
 when length(b.app_desc) between 500 and 1000 then 'Medium'
 else 'Long'
 end as description_length_bucket, avg(a.user_rating) as average_rating
 
 
 From AppleStore as a 
 
 join applestore_description_combined as b
 
 on a.id = b.id
 
 group by description_length_bucket
 order by average_rating DESC
 
  --Is there any correlation between length of app description and the app price--
 
 Select case 
 when length(b.app_desc) <500 then 'Short'
 when length(b.app_desc) between 500 and 1000 then 'Medium'
 else 'Long'
 end as description_length_bucket, avg(a.price) as average_price
 
 
 From AppleStore as a 
 
 join applestore_description_combined as b
 
 on a.id = b.id
 
 group by description_length_bucket
 order by average_price DESC
 
